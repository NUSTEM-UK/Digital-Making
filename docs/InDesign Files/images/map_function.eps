%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 313.000000 102.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.5 (Build 18F132) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 313 102
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 313 102
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: AzoSans-Regular
%!FontType1-1.0: AzoSans-Regular 001.001%%CreationDate: 8/13/19% Copyright 2019 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.001) readonly def/FullName (Azo Sans Regular) readonly def/FamilyName (Azo Sans) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -95 def/UnderlineThickness 50 defend readonly def/FontName /AzoSans-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /x putdup 34 /zero putdup 35 /three putdup 36 /five putdup 37 /nine putdup 38 /period putdup 39 /one putdup 40 /y putdup 41 /a putdup 42 /b putdup 43 /c putdup 44 /d putreadonly def/FontBBox {-100 -272 1294 1011} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF1D53D6B9109E818829FD3D7CF1E393EF224CA8AA5B3C74D203792B9F0C5777BC2083F8AAA85E855394A8339ECEF2B00673EB8D41E4B5F40DB679B3CAE7BE2CF938617BE512182744444BF78B08F63EDBCBC053B37919968BB4B445C77F1B7ECD5CF740423F589FC03814EB47DF1D8CB99451BA28D4EE9D846FBA01818BBB8B3107B09279047363B3C7BA3BA42F00257C61B95C3D7A1052E8ECC3A8FC21F97BB0020F79CB9D2CA66C712E6AE9BE6363259062AF687671637263FCF6D726F3505141342E117B1390A0A76A24BA6E977823214862BFA2C500EC1BFF4CB4442C21A4D35877516BD787947766EB690A8D2AF480BF93741202FD7E3F4BB22CE1EFDEBCF16A4E6D93CC60E11767230CC646735BFA092E2F0A939F37A737D6C471F71D2810EB88C3CD00D6C679639B1E8D7A22F2B9B71F3D6C7259239E469921CCCA3123F945AFAD19C4BC194F2293B8F50E8682AECDB280C6E020BC1F0EB8E80E97C63CEB8BC36A1E64E748DB64681DF3CBB0B21B1736B99203743CDC28B8E27271DD86BE4AD3799606AF5C9D59FDCB66C6321FC23ED21809AF43EFE92F78893BE804D8F06EFC27164751657A7F2E6D2CD4C8DB21167F06E8399275AE29B243AEA515F03169EC03723076387D63EE7D2C735A60634F74239B2A6B8FF4234930D0AC166252818B4DB860F844841986CBCA48165CFD3603E5CC71F6CF1476ED44BAB4AE567E63E05206249AB31107EF2DD6153D7B18CEE71D5607EFBB1003529F5ACCFA18273E85F599A9E2D23DEC8A9ADB9ABAA28A0B1D79282FBF4BE2BF626403F4C5EA482AC153D543FFDC860023E1B5C7872A823A50BAEBE4A583C066B63E29B6198A54EF1FA1282C005B554C6161D195035EDC3C093A02507A4E6FE66C33617767C52C8C5BFBAF7E4CC0FF518BA6F339238D88F9D9823E295D2E4834EC7767CD29B42BE3F15DAD835A693A661AD99544264ED4692525D19EDB436C932405379C1BB20F3B9C256C100B112B548E829F6728AC3772D9527A3366A5B5F9F95637AF7885F090C3353369FA9AC50DEEA31B72CFE547A77BD945E33031350BC4057453F43D454886F67F03DB6EC06AC5DB3E60FB107323E3F04B5DF8A362FE67CB6048D6E43D02E424139486780884F4847CBAF33AF434DAE6A1439C2A530A368018EC3D8731766E80B8F242C5DE56000A53B43F5947A03FEF1F9351242FDFEED2982F0BA23DD7F31300405EB9E2A1537AEC37A2641C0E35FF08719D461F4D52B4A4CA9820F987FF40868A808176DA71F2FA50CD78D91113E7CA6ABC46D549590E403BC0C86ED4B4BA3C95AA3EB019B15A412AEC0481D7B2A5D8E2AC09FD454E742EF6C60A2BE93E8F9770078C2C1A10383ED26507CE00B9CFDCE2C62808AA937203B474388789B590D773FF458680D03E7F8CE6C767D43E1B4CB7BAC91BCF80DBCCE9E5061FB5AE88AAA297C3C8B9D9BA2F172C00A6D44343AE3DB5AC3E3BE10F019E7018068ACF5B8565325709BB68587AD1952A923A5AE5FF81DA3510830196E8680B480ED5275D7D0D1F22C83FF588B0CA73F0FFE9310123CC58939B89AB4F4CEEEDA6C8BB6B2438A15F1B8B580F445870A8C354D4E84FAA49F5B320E9B3955B1584BF0D74789C9F8699B3A1FAAA7D74B04106A3A85A300C60748BF9E477F7C4D75DD81D38F2E5BE56D0D01F4439F0A4DDF75879D46D0DCE07DC72442BD52BBB779E6EF6ADB9000976A43A5142A594EE971DFED27FA0ECC2CF6153E956CB3A918C9CB6CE439A63A223B4405DFA5BB316E99B2172AAA65EA0F0FA375535BEE7F174C327B9F784B7ABD28B3E7AD76EA6985666DA3B83036FD7B90E3992162A41F386CAC84350A66D41EACCA7E1D9D8B2BBC6853044A440ED4226781053D99F43C8A30FB0B98E27B43FEB4BC5E479C42B5B61486974E5C28D22DB1FE337087CC744F814E528DC13264F08F3540D406C963DB1A089E9EC78EF1417B5299586D59A51A8C019D86D3130F42B6EBB024505868EB242758DDA76AAA908E07D73952DF945AD99BF84B1D854CC40ED25256DA8FCF061AAEE225736C0A4CF09B0732015B6B2589EECD4101E09358DCEA893F2421BD939E16F2C291D3AF9593B888942350AD24FA8838B40CE3996B81B5CDB52D4FD46C0BE28C42C84E070DB92E2C1C51C8C358D084EDF6DC9649D41A434D45D4BDEEF1EB64C644F8D7767F25CA340ABBE50A48BF4C5B1110F4B7465A483296149AE107E8CC16951DFAE65EC351FF4757FB2CCEB90262A85708BFA5798763608052795B89F70F698B4419673C55D37BB64A31F2B26D246EDD9B80CC17AE72CA384E535A44F2909B78EB108E043142CCFB03AFAD211047E6FCE5F69476C83C32BA485F4DE83BBBF4C35E3A44FC21761EDE0BAFADE8A7BAAE00D74901BE6F89CFB2C4CDF07332946B89FEE31D43342AAB3DC5D9C8317BDD01646594D426BB15B68CF8D24B103C6A8FA696336F1C2EFFDF9295B959C2A1419E29BF6BA823500BC75DA4E5E96B94E22BA4F4167A8ACEC5A6DA14CD947EB2582E8504746D5E93AFE4D3A09462D2E4D2515E461ACBCB7C3A1615F23C6877F0C282C961990CB8D7197781A5A41F185E3F89F5377CD141B9CC5C9C656DCC9F2F6720D5A709BC1CF1E476A33A8D6BF06D727D0B42676994491A3153350150A5FA21D705EFC1B4CFBF84B16402EF58B583890499B4AEBF5F1A5FFA95AA4AB7A6A825BEC7B0390A72A868CA1065A073972968C82CEF28D1C136C6900263FA7C271AFCCDC10EC4BC1D0F8812355E0975E02C5810A1D85E1C3D6F10792069E227226DF885784059010A567FE4FF2F3913951668466E7F7DDF258A8FDFE9BF2BC11AB6252EB1B80E367724F8AF7832284DD8BCC17073A0906BB08300390A9E900955B70879C40D8081DA27633456DD145AEC609AB6B5DE57B604D62B0F8EF209AA685167FFF6C019E2BB104E9F56920BAFDDF1D32FEA6CAD2FED0A424084A1D91C1CBA7F22975A2BADBDB39AA73ACB851C30DBA61F5EB1DA0F045C41527165C8C359AC8DDB93F4750174D205B9AC5BA52EBE13BB0AE063CD93DBB3C36395D1D89934DC474B728E95440C8762C55A20D6280740BA1BB87E06FB8F84EB666AA8ACD556CD17A13534B9D0278D86984CDBECC104084774871B78A3C3BA87890D264CAD1D69A17184F34C950E97338093A5E383AB37208B88BA4192F3105311B0D87B9D9113EB37F15189FA364DF3135F142B2B49F43537E52966FC9D180640ED72AE64711A9EE839632F1D99EC747EC15B7F7D169B944D097DF148F33DE996833B537A09AA8094F40E6F6DFC814EFD82603EBFA704607EA11DB4C5D0A7B66A133B16F6D758DE7C3D0C47D5DFCDB2FA9A51A0400E484C04FE827B3095A1D1A356567116A40445A3BAC0AEEB24B0B900CAFFB9819EECA49694294BCCD8BAAB33909EF72F13731957B3BE2B106A41402DB401C23334C660FFC251A6FFD7E163D555EA67C53381F50207D5EF0E014C074F5EBF28E90F1B0418495788DEF657BC45AE55E69A4C86821B0F2DFB50A3A06EA0055EBFA00BC6E978DD4F185D6B27F5448F1499C524E6B5309823FCCA8721BCDB51BD980AD0A5DEE3087B9B3423B94D29880499A4C0C13A8F3EC3AC2BD4597E2032314B70816D6F48CA0DE3B3E1FCA818FAA27FB4659175CED558A3C398C65D1D530C8D0B39A26D9BCD1C332CCF5C74C0410E220BF12F980621FE1E62A9470845140AAC5B3F00E2B25691D6103225EDAAE1E96C1E574C3FF37009CCB693343B91FC3E68F2454AC6669C772365DC7AB27B7DE41B2CCE79074076F33F540F855F34B979379B43434DE885077549C60136415F7B668E2A287AD1982DE65A52CDA35306EBAF6282405E29AEE877876E7858FA36467C32FCADBE87764178713BBDCCADCA5AD25F3B240B0C1FCD073DB12E3A5AC8A3E5CCB7D5523BA8118E7E4C9D3684A0D983BE8C7BAC05DA02512988612D4B651856F0C0417BF4FB9CFC21DC216AD60606A0982909CA131807ADCBC3564598738A1CE369C86F82B5D13FC30AAF5F34A9F73E091E061EE5279412BD6A1CF1B8E911630AB9B6AAB8DACE8209AA693E2078BD8686AD9013D44D0A106037FDC067489C31B80372A37F743B87792F0B92B289BE75A4B075FD7CE8F737FCBB0CA9D794F61EE991B689670FB73F589EE57121BA67328944A270C2262B993CCB7F9D24A10AAE642CFB4551705A7899A53931000C25376B036F6E7F8D2E97DB43B8DDDB736179270FE6E789FADF5F5B892D6A7EF459D218252CFE1FD61E901F66B7F5D41BE0983753BB68531255BDFA56900D40F6A0F5729A535E03A7D38140546A45076A35DC3E9D2C123E0794D14BFE1FCA42795C94619292C9679B6D123678A1DF1EC883097DD6C2A2888F6291788B0BC27A5E58AEE1127EEC98A71DBE3BB113CC33E775C1057472BFEFFF3591228ADCAF58B8D3745A4B7BAC2EDE3F4C594ABF75B31C11B6FC1E275FB28051F84E205E7E200C8B94D226D1C72B5FD1178E3815A6990B53E70EF59F2416654EF2385DE40FD562FAA0B79B7410C5D34231924194FB294CEB2A6ED4C2D7E5CC04E5D21E7801BE79F87D8AFFFA8E0E73E4AC9BC8D49C12B07D70C1F8B19C928B1B51CBE6ECBE6D172059C6907D325C719F190D99F151F9C369937F30C72AAA6EA2FFBAC4DA4802BB34D337F80E254259A04F397456B1A0A9471D12EBEBDED0B57B14CABF150612B2BFBD4732A3966B76AC9F73C6EED422B566C04723AADEADC6B088C180934EC41D1040BD2654E601D72902513835F3986FA08C42C3E0C7E09E35BC79C9C4D8B102CABBF42435BC23B797E752AA8EEA40CC66942549A28CDDC1A0D1304DACE81CCA74D8DC1CA408785C4C83E1F3F9E0D556F74E044896C3B5CFEDB7836E3550757D778B16C138719535225E1C0FFD38E1DFD2C34C91A35450FF2DDC65EE9117E44C174E207D36EB2EA2A47A3C3C8B6D33C8EF274DAFA4A90FB807EE9119B84D1B9E4CF0EA00D2DFB3B18CE5EE0D2C29A9074D1E8AD87CAB14D5D695265FD6BF1479AE2172930E4EFC335478A88A7153CD0F7BC426002A39F12CB874D90E358F1CB1899FA87BAB0CE31530131C5C88B6D715179C691C589526813E9D026AF6C54464136BC3357762456CD7141B1631280B6357C0617019C6055919754F081EF3CC02C8893950E166A6887AB27A0DAE1E996D4858F85224FD41D180056BAD4AE7772C8A108A9264DCF520260C289CDCFD5D1556DEE431C1CE81292E97DF60A1B9FF52EC02D70F5BE494DC2EE0A669E998535A5E571D7D93BA8886A0E68C5A52B28236EE0D6C767F0F5FC2C95875A6ED747D8B07815E46A7AF5D255E62150EB082B57FA8CABD30F9D2A0AE96D7459EEA1F4FA26DD4CD03974B3D45459DFD2E8754691C13AD6F04FA81E6E27E2CB13F8CFC7957307F7A9D04E6C28825F10489E6F795FF127D3DA42A7ECCA693342EF18338AD1D0F603BB94661A23E86968E9563E9A5B96042C9C79663524D39E3457F6AB9C0C7079EA94BA0BAA33BD510ED512720AF7BA3AC466FD7B2BD541D5B29FEFDF2D4EADA79AFF4C7DABB83B707C8E358AE05088B9560F016647BCEF1D78E7763E639C3646DBC3B15B36EF59C2C2177BDBDF2854DEBCF3BB77F6A32973F5E7B30ACBAB44123A2B2F0B02D242AD4B5EBAD72C5FD51A54A55913AA81CDF30D00D3C3A6435C9FC039CA2B42AFD65F628267E8A240C87E9D46AB9BBFC340D113A79106B604486849B4FD2B602F6ABC94337F5625AD1C1C1B08D11A657CBA1F5974225D3FFB1AA765F122EC045D88BD1F7C36E3A0E0226E15AC1867EE1DC68CC245A5968490D7D4AC2C49AF746D1A6E33545518B0E17103219DB178C3A6236524C02141CEFA7E626F182CAD868DABE4BD9C1CD8A17E78C540DD12985F3F38CF30156829E8CDA5CDB0C27C9B01F29DD801DF071B27FEFA4BB9198978CD77F3B267A2711A15161DD8F02C7A59B878790EAF1C4FB39E04B4222BE6324A9D3E5548B57501E9EDC4B47EDAABAB0B7EB0680B6EE8BBCF35A318F4DB96755033E70FB4A57C70667CF1D617C6152DECC915DD09C18B411FF9A8C0614ADA606D08E665FAACAF81CD2A135D743CE0BD0FF498DBB7680FE92A22D4E88A817F711259E9E876DA9156AE8FCD5DDA264A977A5FCB149C73C15B149CD4C83D4FD8D36CFE0FD3D6E4455B022FE1873FF9692C62BF7E8F13453F066E9208A8EE00727AC2F2BD59C9DEA50DF3865CCB7DA126C7EF7650CD4B12F0E1824F48C10CC740B5E2BDEF79E5D8223ADCF13217B86F46C9D80B5360E1F9FBA59550E053001FC8B069B3FCD5846F6320992E4A1CE94332765DA3F50BA39BEF21C631E08F38D51F80C7F0A35D5208B27AA30D85095E81220F31F6C9A3171588267BDD89A6352CD8E658E77627C339316EE74D3D70EE5596B0E0260255BCD0E9866912655BF83A31651D0A8A5E203093538A4AD9EEAC64464BFB33952F670009D2A27C5BEE4CD0B1C08EE5FB8D12834087FADBD0FB2FE32B6829FA61BAB1E2D0173613998600DA1C14BAC47CED2B3B686C65080FABFE316F88EAACAB9557E5BF44BFA4BF40AE8C3E76D7C62BD1F76EFABA847A683F95AF434227F0F330DD45D6CD4A97C41AD29CEE2E2FE45590EBD4DAD79627D0E58C63C4A9BEBB71D004E913BB767FE1728E82BF6FED659325DF8470633BFC88159344F19D3C4F9BA202AB242E170F76A521ECA17C41C63B5E1D6FADB80AF23332F6BBD886BA925C4A99F0E00E1741E1326B0C7837FFEA3CCCA84813DA5F5ED1F66EADC69D87A148710005578AB3DE180AD62FCB8B5F8D7A49F9C99E87211CAC908AEAC6BA0B4EB50994FE2F05A709B7C9355634532858D427D3D6DB769A3C4043BA0CD4CE3AC16DBFD51A1F60277F530B5F1D4DFAC7F29842091B2C62B9258CF23B932DAFD441473A8B013CF7545CC908A2A6BC8208711E1A356E35114C8F50CC00EF4464BA03C6A572090F3C7C72CFD5AB4739DA90620931E6DB02117CB4EEDA7E306428AB7A087D648D2637A447BA9C9D78F7EE083C8ED221772FD0A81F78ED9B5F1CC58D35D24B6718ADAC6C17A6E21D61265DB44DDFDA96C3A23C392F01957A98071CCB9007DEAEC2B6F08CD2772BF1D9864D021A6445226D1E88203909FEFC9DB5EDDD21BE726BE1C09EEC7A678EEB0AAA7FD291DF074085EDE2D5142DD3FA564E9679EF3EA8DC0DE69979DB100CB882ECFC9ED89030E2E227597D3EFA5C7524C483398FE162B36A0B2E1EECF1351AF560B86200B5D9641DE93DFB8F3F913BEC2E5BA78EFCBB56707BB47A2F9A833C51EA90763E8CB32E656C3EFC78EC108C66A6358E27924E7EF39515E8373090B13203F6FF02440BB825E366821E33C8139B246DE0058FC4E1EB342FC311938790BEC30AA4B01C48D34C6906200DDDD4B9EAFA0C42721935C45B6CF68EF52F831D9CAB07FD94E029F1EC03A591F968DE2A062E2EA74621E2429E1787496501A01C075395A4EEF9B37757EA6832A68ADD8068F1D8CFF37AFD65660FE98E5A2EBB0C6C4DD55BB9121EE90F6A451BE058254ADEB46EA556CD1DDE37730BD7D93B366F031CC15C88F98F0439867F47F4B9C2EDEAFCB8793DD47DA8A8904666C9B0D2286040BA308FA17BA87C0CDF65765D97AB4FA57F59B0F0DB7F603BAE9BCB07E7263E2946D0C11B4785D1FF2AE7C30CE454781CACE8A1CCB135558F92C797FD77075E02428D591FCF22793EC3C855FD13E2E13E18D31291B7E1253986CCB455899148AEE097E7CECD11F50257FBA68F42AEDA6A4B6FD626F700CFD5C2BEBC8C6F4E5B0FED195E6E7DA8F384A6D919AAA407AC0CBF23520764B67C5E3AB4F545A8B95C875E824BD54EC8C116946585278FF6621C274349DE530D1405F8018569F67C865E2447E26DF28C8207A7BC3588595B9E76B456655961937495805FD5CCE647F998EA55A2BE3066BD0B4D0F0A77E17F05B53843A42942A17AD572A397B17176455BD18287D2414AB2F720FC5142AF5CEAAD07B020D3B84DAAD94BE76A698298FB3B1EB9C376E0243B35DC0FE1250E4EEFF10E8318D4657B99A125A8D2CE30A64AB8B5A1033C9A47B8E29531999D4FE0F8F51EA0B6070BB3547C5EF244F0170F1B93B015B063C3028CF8C5B352FD4124E0056FDD0D2F413FA440FDDD6A1FFF55772D164EF6644D5D8A42336EE3A6567FE0800F82688879F61DD7C8C53E43E0BFB20A768F86DC4F87F1599AC831EF2D2402183FE1E0EC93385D77439EFAF9219312E207A4EA5BE737E574C5D95A15269ABBC0FE12508CCB62D45A7B1FBB7924F91E05EA42DDF908A5868E4DD47892EF9D949B905F189F8871C8E0465815FA487A9FF05608B9B9309AAAB2C533CB72CDD1EC2C21B5A6882E80EDB8D71E5617B1AD15777C7E60009C79C8A502D18090C9CE26B06032912F6079E6558AAA0032AAF2BDD38336215C3F34B33C749BB90B1B921583193532F0953D9D128B5734E14ED88D52DAC3561355C315171AC45318B6D5F3F32668560AB8ECF84294802F5577803128559F14FC2D6F68EB2E0F887C9639FDCD50C8FCAEEA81D878B9E1A263C31C6D7A2BA494B9C6E550B2264DA20C4985BF84BE556AF18EADD2C7C06F3866CF8E9BB6C0D06AE63CD10EF52C0421EDB9FF6829A4263B7D75D1799C0A49F74960D51617F80A618AEE122AF4C67E1B9E5AF07E8A82439D61062513304E721D0A65BCC0C2FBB92E067BF0E52544A3D3DB4DC1A0A033A909FB4D74BD245FE6DDFA7C4555E192B006663F059B99A23B6373C25FB5C1A3D7C91AE26C3C02C7BACACBFC2C7EA29399FEAB86A77F9C0E53D7DA84D763363DB1F222E2CD4FF98DCFF5815C8385B5BAB60F22885FE64C3C8EEC9A18A4B06FE2DB578BE78315A793DAA71BAEB5EB13EDF0DBFEA70D71E65F18CEA00B187BA9887E9619A9C728096CCAA98AFBF31A6992659E62078F2C7F9A9779CB8003D430B9F0D692DF4DFBFA3EDA0019B620FFEDB2961E4F4CBAC56A2E0C661934C762111DFF34EE436367299AE55524B383207BFC45A0E4DAF46459DE6634BEA0AEC72CFBF76B03449181E624F9D0C6682B7E8E9F4772EAA4011D585F1703398F07C43BF22ABE52CD624BD2C9BA92FE30F30BE04D88A01BDCAB7B2930909DC7A48B6606A8D73AE961C5CF40421D0A673D4C2954B782B6AE484E21A11BEBF8927C8DE208227782677A652F4DF99FEA2543E25A9FB6ADA6C7A77418B37702286FE263AFDA688816EA56B77B69276B063A4E387E91993DE4E02C1D7845C0F7F192C2E921E40A3BCF0647687E9472A67F1820E2E277B23185D40989C8B16BDACDB6765AB68F279387121A33730A3590A0C2AD975B28645B17B829686C23D145DF2C5A55C17E313E3337C4FA9BE9D4F9824F139EC7962B7E9DB185DFBBC8252C2A41FF0E4514568C6A8FE09E7FB99D5CED44A91FAB96CD365340631264901BC2F3EAE7253C56A6C106C2789B777E2243B2801FE685033474D68DCBB0C4F585F2D46FABCA378BF54D04709F65DA5DB7FDE5356245AD5F47F109B0C67CADAD1276990CF1101FE0CF8232BB7A7A5FE7216BCE00153CBA9AC5A5EBA27978EDB9C96ABD5EC081769CEC80488E6CC1A602B3DD498C46C20834D6D0BE3F9531B954FBF16D93497B26106FD118025A2A6C248578F3F617404FE23C10DD0911AE65A5988FF438F0D82A08B826CCA12E8F61FBF65F00F3166D3EC56D88F0F62695AF2ACE8C0CBC01998194FC62F14BCD7CBDB20840E80C44F045AAA70DB0964422128CE5A796A6C0125EE40D45D254B1DBD4E6159523E5A32C93D3EA473D357D432B75FA898B1364B52F1BA1B0340E885E64AEB7C90591D9BC7EDE12532FFA52210DCCEF04188D715C1F56885B3EA03AF55F6881E8081E94345FC8AE35612143E4BC808606C344D5B89E72DB80BE7871400DDBC79F3A1F91ECCD46287FF953B54EC3CFD6D8C87339196AE37D2DC7777A0DBEBD070EC07A8C687E41BAEA9DDA96E15B4AEEC39DA61C67FCB1A4A1A411B9C7A4D425E4F83345CE3CB872696B4960034A07ECF9738FAE1B2203A6EE161DCD3038BD219E442A48ADCD7658825B93A15E65101AA4EFF28E8C329CD0EE5FD1938914E4D8CBE0F621809416B6B77E6BEEB92DB210F7544495F9A9DC334B8B4AE12C5116FBA3A14BA0109E6D8F36506822DDB46B6CDE4850FC5B38144CE804A5943F530AF89680D6A675330B31321B74306239CCD048EAE288993FF14B3A2060A43052C48D621592CEA999AAF40764E19E9F4454704EE4F0ADC2DC04C73425F064AEC3748588D578FD4314DC82D35C57D672BC9CEC90AD9A988517B46A61A8F3F9C725930AE3B8E56932BF5A43AF400CAAC171B1517120F93ABB61E74899AC74233FDA0A138286FEAF4F13969A3613EF251FBAD4744D9E34B3281BEC63A0470F17FC7D100EBE34017E96253877E00D350F6B36232542070D838416D08E1F5E5FA5D688A737073FC014EC8EED240D6311C0AD1124B76188D423DC536D9B92D9DCBCFD9399083C9D10C6C9BF081C901BE0BCDC4EEDEDD26C6F367833EA4CD025C7B964BE5D92123D613716CD886F5174B38DAC3E2C5133E381FAAD61E58D03B2E40FA6B1AFC9638EAD1FBAF4BEB46166C23A0F6F05485AD24A6F57FF62B82C9D02411C46E7EEA48F0A6E9783CFCFDD5FD58B9F1DACAC0E0309838C5A3FF84B124E99FF2B92A5DF0286A8E796E0E9E51CF0051E3FDFF33C077535354433FAA34C761E9290F8B2A63C4637C8B8F196BDBCB60A04D112F020025E18E2BF54774D317919103625D76FDC12401A03261B16CEA032E06A8EFFCFED039A05A7FD524DAF3047799D95DDBC0E6279BA755EF8F8F529D54A9F8C4769F1900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/AzoSans-Regular cguidfix
/F1.1/AzoSans-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
1 J
1 j
0.60000002 i
/Cs1 SC
1 0.14913142 0 sc
q
0 0 313 102 rc
1 0 0 -1 -156 444 cm
272.12598 364.18112 m
272.12598 381.28113 l
S
0 i
CM
116.12599 54.718887 m
119.12599 62.718887 l
113.12599 62.718887 l
h
116.12599 54.718887 m
f
0 J
0 j
1 0 0 -1 -156 444 cm
272.12598 389.28113 m
275.12598 381.28113 l
269.12598 381.28113 l
h
272.12598 389.28113 m
S
/F1.1[ 12 0 0 -12 0 0]sf
269.38669 360.9075 m
(!)s
1 J
1 j
0.60000002 i
/Cs2 SC
0 0 0 sc
170.07875 397.125 m
453.54333 396.5 l
S
/Cs3 SC
0 sc
0 i
166.07613 379.09515 m
(")s
0.60000002 i
/Cs2 SC
0 0 0 sc
170.07875 385.51181 m
170.07875 408.189 l
S
198.4252 385.51181 m
198.4252 408.189 l
S
226.77167 385.51181 m
226.77167 408.189 l
S
255.11812 385.51181 m
255.11812 408.189 l
S
283.46457 385.51181 m
283.46457 408.189 l
S
311.81104 385.51181 m
311.81104 408.189 l
S
340.1575 385.51181 m
340.1575 408.189 l
S
368.50394 385.51181 m
368.50394 408.189 l
S
396.8504 385.51181 m
396.8504 408.189 l
S
425.19687 385.51181 m
425.19687 408.189 l
S
453.54333 385.51181 m
453.54333 408.189 l
S
/Cs3 SC
0 sc
0 i
443.1387 379.09515 m
(#$%)[ 6.660000 6.528000 0.000000 ] xS
161.09612 421.69949 m
("&")[ 6.924000 3.036000 0.000000 ] xS
444.96869 421.69949 m
('&")[ 6.108000 3.036000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0.56031829 0 sc
272.12598 412.41971 m
272.12598 425.19687 l
S
0 i
CM
116.12599 39.580303 m
113.12599 31.580303 l
119.12599 31.580303 l
h
116.12599 39.580303 m
f
0 J
0 j
1 0 0 -1 -156 444 cm
272.12598 404.41971 m
269.12598 412.41971 l
275.12598 412.41971 l
h
272.12598 404.41971 m
S
269.34869 434.77756 m
(\()s
1 0.14913 0 sc
167.15945 360.9075 m
(\))s
450.24603 360.9075 m
(*)s
0 0.56032002 0 sc
167.54146 434.77756 m
(+)s
450.48404 434.77756 m
(,)s
ep
end
%%Trailer
%%EOF
